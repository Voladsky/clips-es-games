;========================================================================
; Этот блок реализует логику обмена информацией с графической оболочкой,
; а также механизм остановки и повторного пуска машины вывода
; Русский текст в комментариях разрешён!

(deftemplate ioproxy  ; шаблон факта-посредника для обмена информацией с GUI
	(slot fact-id)        ; теоретически тут id факта для изменения
	(multislot questions)   ; возможные ответы
	(multislot messages)  ; исходящие сообщения
	(slot reaction)       ; возможные ответы пользователя
	(slot value)          ; выбор пользователя
	(slot restore)        ; забыл зачем это поле
    (multislot answers)
)

; Собственно экземпляр факта ioproxy
(deffacts proxy-fact
	(ioproxy
		(fact-id 0112) ; это поле пока что не задействовано
		(value none)   ; значение пустое
		(messages)     ; мультислот messages изначально пуст
		(questions)
	)
)

(defrule clear-messages
	(declare (salience 90))
	?clear-msg-flg <- (clearmessage)
	?proxy <- (ioproxy)
	=>
	(modify ?proxy (messages))
	(retract ?clear-msg-flg)
	(printout t "Messages cleared ..." crlf)
)

(defrule set-output-and-halt
	(declare (salience 99))
	?current-message <- (sendmessagehalt ?new-msg)
	?proxy <- (ioproxy (messages $?msg-list))
	=>
	(printout t "Message set : " ?new-msg " ... halting ..." crlf)
	(modify ?proxy (messages ?new-msg))
	(retract ?current-message)
	(halt)
)

(defrule set-output-and-proceed
	(declare (salience 100))
	?current-message <- (sendmessage ?new-msg)
	?proxy <- (ioproxy (messages $?msg-list))
	=>
	(printout t "Message set : " ?new-msg " ... halting ..." crlf)
	(modify ?proxy (messages $?msg-list ?new-msg))
	(retract ?current-message)
)

(deftemplate question
    (slot value)
    (slot type)
)

(defrule set-question-and-halt
    (declare (salience 102))
    ?q <- (question (value ?val))
    ?proxy <- (ioproxy)
    =>
    (modify ?proxy (questions ?val))
    (retract ?q)
    (halt)
)

(defrule clear-questions
    (declare (salience 101))
    ?proxy <- (ioproxy (questions $?question-list&:(not(eq(length$ ?question-list) 0))))
    =>
    (modify ?proxy (questions))
)

;======================================================================================
(deftemplate input-question
	(slot name)
	(slot certainty (type NUMBER))
)
(deftemplate possible-fact
	(multislot name)
)
(deftemplate fact
    (slot name)
	(slot certainty (type NUMBER))
)

(deftemplate target
    (slot name)
)

(deftemplate token
	(slot name)
)

; possible-fact - факт, который ВОЗМОЖНО может быть выводим
; fact - факт, который УЖЕ выведен в системе
; Разграничение можно использовать для отлова неверного ввода
(defrule match-facts
	(declare (salience 11))
	(possible-fact (name ?val))
	?q <- (input-question (name ?n&?val) (certainty ?c))
	=>
	(assert (fact (name ?val) (certainty ?c)))
	(retract ?q)
)


(defrule no-facts
      (declare (salience 10))
      ?q <- (input-question (name ?n))
      =>
      (retract ?q)
      (assert (sendmessagehalt (str-cat "The fact input is incorrect: " ?n)))
)


(defrule match-target
    (declare (salience 10))
    (target (name ?val))
    (fact (name ?n&?val))
    =>
    (do-for-all-facts ((?f fact)) TRUE (retract ?f))
    (assert (sendmessage "Целевой факт найден, стоп"))
)

(deffunction combine (?rule-confidence ?prev-confidence)
    (if (and (>= ?rule-confidence 0) (>= ?prev-confidence 0))
        then (return (- (+ ?rule-confidence ?prev-confidence) (* ?rule-confidence ?prev-confidence)))
        else
          (if (and (< ?rule-confidence 0) (< ?prev-confidence 0)) then
          (return (+ (+ ?rule-confidence ?prev-confidence) (* ?rule-confidence ?prev-confidence)))
          else (return (/ (+ ?rule-confidence ?prev-confidence) (- 1 (min (abs ?rule-confidence) (abs ?prev-confidence) )) ))
          ))
)

;=====================================================================================

(deffacts possible-facts
(possible-fact (name "Battlefield"))
(possible-fact (name "Battlefield 2042"))
(possible-fact (name "Battlefield 1"))
(possible-fact (name "Lethal Company"))
(possible-fact (name "Stanley Parable"))
(possible-fact (name "Team Fortress 2"))
(possible-fact (name "Overwatch"))
(possible-fact (name "Counter Strike 1.6"))
(possible-fact (name "Counter Strike 2"))
(possible-fact (name "Stardew Valley"))
(possible-fact (name "Minecraft"))
(possible-fact (name "Terraria"))
(possible-fact (name "Cuphead"))
(possible-fact (name "The Long Dark"))
(possible-fact (name "Chronoheart"))
(possible-fact (name "Civilization"))
(possible-fact (name "Hearts of Iron"))
(possible-fact (name "XCOM"))
(possible-fact (name "Heroes of Might and Magic"))
(possible-fact (name "Starcraft"))
(possible-fact (name "Skyrim"))
(possible-fact (name "Factorio"))
(possible-fact (name "OSU"))
(possible-fact (name "Counter Strike"))
(possible-fact (name "League of Legends"))
(possible-fact (name "Dark Souls"))
(possible-fact (name "Ghost of Tsushima"))
(possible-fact (name "Fortnite"))
(possible-fact (name "Among Us"))
(possible-fact (name "Apex Legends"))
(possible-fact (name "Cyberpunk 2077"))
(possible-fact (name "The Witcher 3"))
(possible-fact (name "Hollow Knight"))
(possible-fact (name "Darkest Dungeon"))
(possible-fact (name "Baldur's Gate 3"))
(possible-fact (name "The Sims 4"))
(possible-fact (name "Fallout Shelter"))
(possible-fact (name "First Person View"))
(possible-fact (name "Third Person View"))
(possible-fact (name "Realistic Graphics"))
(possible-fact (name "Pixel Graphics"))
(possible-fact (name "3D"))
(possible-fact (name "2D"))
(possible-fact (name "Destructibility"))
(possible-fact (name "Top-down View"))
(possible-fact (name "Side View"))
(possible-fact (name "Realistic 2.5D"))
(possible-fact (name "Voxel Graphics"))
(possible-fact (name "Rhythm Game"))
(possible-fact (name "Shooter"))
(possible-fact (name "Platformer"))
(possible-fact (name "Strategy"))
(possible-fact (name "Puzzle"))
(possible-fact (name "RPG"))
(possible-fact (name "Sandbox"))
(possible-fact (name "Casual"))
(possible-fact (name "Horror"))
(possible-fact (name "Survival Horror"))
(possible-fact (name "Turn-Based"))
(possible-fact (name "Real-Time"))
(possible-fact (name "MOBA"))
(possible-fact (name "Roguelike"))
(possible-fact (name "Action-RPG"))
(possible-fact (name "Simulator"))
(possible-fact (name "Detective Game"))
(possible-fact (name "Class-Based Shooter"))
(possible-fact (name "Survival"))
(possible-fact (name "Fishing"))
(possible-fact (name "Resource Management"))
(possible-fact (name "Stealth"))
(possible-fact (name "Exploration"))
(possible-fact (name "Crafting"))
(possible-fact (name "Base Building"))
(possible-fact (name "Card Battles"))
(possible-fact (name "Micro-Management"))
(possible-fact (name "Fantasy"))
(possible-fact (name "Sci-Fi"))
(possible-fact (name "Historical"))
(possible-fact (name "Retro"))
(possible-fact (name "Dieselpunk"))
(possible-fact (name "Steampunk"))
(possible-fact (name "Online"))
(possible-fact (name "Offline"))
(possible-fact (name "Co-Op"))
(possible-fact (name "Competitive"))
(possible-fact (name "Triple A"))
(possible-fact (name "Indie"))
(possible-fact (name "Story-Driven"))
(possible-fact (name "New"))
(possible-fact (name "Old"))
(possible-fact (name "Free"))
(possible-fact (name "Paid"))
(possible-fact (name "Difficult"))
(possible-fact (name "Single-Player"))
(possible-fact (name "Multiplayer"))
(possible-fact (name "Free Expansions"))
(possible-fact (name "Addictive"))
(possible-fact (name "Bad"))
(possible-fact (name "Classic"))
)
(deffacts rule-token-3 (token (name "rule_3")))
(defrule rule3_1
(fact (name "Shooter") (certainty ?cF302))
(not (exists (fact (name "3D"))))
?tk <- (token (name "rule_3"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF302) 0.9))
(assert (fact (name "3D") (certainty ?cnew)))
(assert (sendmessage "Shooter -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(defrule rule3_2
(fact (name "Shooter") (certainty ?cF302))
?f <- (fact (name "3D") (certainty ?cf_))
?tk <- (token (name "rule_3"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF302) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Shooter -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(deffacts rule-token-5 (token (name "rule_5")))
(defrule rule5_1
(fact (name "Platformer") (certainty ?cF303))
(not (exists (fact (name "2D"))))
?tk <- (token (name "rule_5"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF303) 0.9))
(assert (fact (name "2D") (certainty ?cnew)))
(assert (sendmessage "Platformer -> 2D"))
(assert (sendmessage (str-cat "2D " ?cnew))))
(defrule rule5_2
(fact (name "Platformer") (certainty ?cF303))
?f <- (fact (name "2D") (certainty ?cf_))
?tk <- (token (name "rule_5"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF303) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Platformer -> 2D"))
(assert (sendmessage (str-cat "2D " ?cnew))))
(deffacts rule-token-7 (token (name "rule_7")))
(defrule rule7_1
(fact (name "Shooter") (certainty ?cF302))
(fact (name "Strategy") (certainty ?cF304))
(not (exists (fact (name "Class-Based Shooter"))))
?tk <- (token (name "rule_7"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF302 ?cF304) 0.9))
(assert (fact (name "Class-Based Shooter") (certainty ?cnew)))
(assert (sendmessage "Shooter, Strategy -> Class-Based Shooter"))
(assert (sendmessage (str-cat "Class-Based Shooter " ?cnew))))
(defrule rule7_2
(fact (name "Shooter") (certainty ?cF302))
(fact (name "Strategy") (certainty ?cF304))
?f <- (fact (name "Class-Based Shooter") (certainty ?cf_))
?tk <- (token (name "rule_7"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF302 ?cF304) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Shooter, Strategy -> Class-Based Shooter"))
(assert (sendmessage (str-cat "Class-Based Shooter " ?cnew))))
(deffacts rule-token-9 (token (name "rule_9")))
(defrule rule9_1
(fact (name "Fishing") (certainty ?cF403))
(not (exists (fact (name "Resource Management"))))
?tk <- (token (name "rule_9"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF403) 0.9))
(assert (fact (name "Resource Management") (certainty ?cnew)))
(assert (sendmessage "Fishing -> Resource Management"))
(assert (sendmessage (str-cat "Resource Management " ?cnew))))
(defrule rule9_2
(fact (name "Fishing") (certainty ?cF403))
?f <- (fact (name "Resource Management") (certainty ?cf_))
?tk <- (token (name "rule_9"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF403) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Fishing -> Resource Management"))
(assert (sendmessage (str-cat "Resource Management " ?cnew))))
(deffacts rule-token-11 (token (name "rule_11")))
(defrule rule11_1
(fact (name "Pixel Graphics") (certainty ?cF204))
(not (exists (fact (name "2D"))))
?tk <- (token (name "rule_11"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF204) 0.9))
(assert (fact (name "2D") (certainty ?cnew)))
(assert (sendmessage "Pixel Graphics -> 2D"))
(assert (sendmessage (str-cat "2D " ?cnew))))
(defrule rule11_2
(fact (name "Pixel Graphics") (certainty ?cF204))
?f <- (fact (name "2D") (certainty ?cf_))
?tk <- (token (name "rule_11"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF204) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Pixel Graphics -> 2D"))
(assert (sendmessage (str-cat "2D " ?cnew))))
(deffacts rule-token-13 (token (name "rule_13")))
(defrule rule13_1
(fact (name "2D") (certainty ?cF206))
(not (exists (fact (name "Side View"))))
?tk <- (token (name "rule_13"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF206) 0.9))
(assert (fact (name "Side View") (certainty ?cnew)))
(assert (sendmessage "2D -> Side View"))
(assert (sendmessage (str-cat "Side View " ?cnew))))
(defrule rule13_2
(fact (name "2D") (certainty ?cF206))
?f <- (fact (name "Side View") (certainty ?cf_))
?tk <- (token (name "rule_13"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF206) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "2D -> Side View"))
(assert (sendmessage (str-cat "Side View " ?cnew))))
(deffacts rule-token-15 (token (name "rule_15")))
(defrule rule15_1
(fact (name "2D") (certainty ?cF206))
(not (exists (fact (name "Top-down View"))))
?tk <- (token (name "rule_15"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF206) 0.9))
(assert (fact (name "Top-down View") (certainty ?cnew)))
(assert (sendmessage "2D -> Top-down View"))
(assert (sendmessage (str-cat "Top-down View " ?cnew))))
(defrule rule15_2
(fact (name "2D") (certainty ?cF206))
?f <- (fact (name "Top-down View") (certainty ?cf_))
?tk <- (token (name "rule_15"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF206) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "2D -> Top-down View"))
(assert (sendmessage (str-cat "Top-down View " ?cnew))))
(deffacts rule-token-17 (token (name "rule_17")))
(defrule rule17_1
(fact (name "Shooter") (certainty ?cF302))
(not (exists (fact (name "Destructibility"))))
?tk <- (token (name "rule_17"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF302) 0.9))
(assert (fact (name "Destructibility") (certainty ?cnew)))
(assert (sendmessage "Shooter -> Destructibility"))
(assert (sendmessage (str-cat "Destructibility " ?cnew))))
(defrule rule17_2
(fact (name "Shooter") (certainty ?cF302))
?f <- (fact (name "Destructibility") (certainty ?cf_))
?tk <- (token (name "rule_17"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF302) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Shooter -> Destructibility"))
(assert (sendmessage (str-cat "Destructibility " ?cnew))))
(deffacts rule-token-19 (token (name "rule_19")))
(defrule rule19_1
(fact (name "Old") (certainty ?cF609))
(not (exists (fact (name "Classic"))))
?tk <- (token (name "rule_19"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF609) 0.9))
(assert (fact (name "Classic") (certainty ?cnew)))
(assert (sendmessage "Old -> Classic"))
(assert (sendmessage (str-cat "Classic " ?cnew))))
(defrule rule19_2
(fact (name "Old") (certainty ?cF609))
?f <- (fact (name "Classic") (certainty ?cf_))
?tk <- (token (name "rule_19"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF609) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Old -> Classic"))
(assert (sendmessage (str-cat "Classic " ?cnew))))
(deffacts rule-token-21 (token (name "rule_21")))
(defrule rule21_1
(fact (name "First Person View") (certainty ?cF201))
(not (exists (fact (name "3D"))))
?tk <- (token (name "rule_21"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF201) 0.9))
(assert (fact (name "3D") (certainty ?cnew)))
(assert (sendmessage "First Person View -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(defrule rule21_2
(fact (name "First Person View") (certainty ?cF201))
?f <- (fact (name "3D") (certainty ?cf_))
?tk <- (token (name "rule_21"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF201) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "First Person View -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(deffacts rule-token-23 (token (name "rule_23")))
(defrule rule23_1
(fact (name "Third Person View") (certainty ?cF202))
(not (exists (fact (name "3D"))))
?tk <- (token (name "rule_23"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF202) 0.9))
(assert (fact (name "3D") (certainty ?cnew)))
(assert (sendmessage "Third Person View -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(defrule rule23_2
(fact (name "Third Person View") (certainty ?cF202))
?f <- (fact (name "3D") (certainty ?cf_))
?tk <- (token (name "rule_23"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF202) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Third Person View -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(deffacts rule-token-25 (token (name "rule_25")))
(defrule rule25_1
(fact (name "Triple A") (certainty ?cF605))
(fact (name "New") (certainty ?cF608))
(not (exists (fact (name "Bad"))))
?tk <- (token (name "rule_25"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF605 ?cF608) 0.9))
(assert (fact (name "Bad") (certainty ?cnew)))
(assert (sendmessage "Triple A, New -> Bad"))
(assert (sendmessage (str-cat "Bad " ?cnew))))
(defrule rule25_2
(fact (name "Triple A") (certainty ?cF605))
(fact (name "New") (certainty ?cF608))
?f <- (fact (name "Bad") (certainty ?cf_))
?tk <- (token (name "rule_25"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF605 ?cF608) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Triple A, New -> Bad"))
(assert (sendmessage (str-cat "Bad " ?cnew))))
(deffacts rule-token-27 (token (name "rule_27")))
(defrule rule27_1
(fact (name "Horror") (certainty ?cF309))
(fact (name "Survival") (certainty ?cF402))
(not (exists (fact (name "Survival Horror"))))
?tk <- (token (name "rule_27"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF309 ?cF402) 0.9))
(assert (fact (name "Survival Horror") (certainty ?cnew)))
(assert (sendmessage "Horror, Survival -> Survival Horror"))
(assert (sendmessage (str-cat "Survival Horror " ?cnew))))
(defrule rule27_2
(fact (name "Horror") (certainty ?cF309))
(fact (name "Survival") (certainty ?cF402))
?f <- (fact (name "Survival Horror") (certainty ?cf_))
?tk <- (token (name "rule_27"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF309 ?cF402) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Horror, Survival -> Survival Horror"))
(assert (sendmessage (str-cat "Survival Horror " ?cnew))))
(deffacts rule-token-29 (token (name "rule_29")))
(defrule rule29_1
(fact (name "Co-Op") (certainty ?cF603))
(not (exists (fact (name "Online"))))
?tk <- (token (name "rule_29"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF603) 0.9))
(assert (fact (name "Online") (certainty ?cnew)))
(assert (sendmessage "Co-Op -> Online"))
(assert (sendmessage (str-cat "Online " ?cnew))))
(defrule rule29_2
(fact (name "Co-Op") (certainty ?cF603))
?f <- (fact (name "Online") (certainty ?cf_))
?tk <- (token (name "rule_29"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF603) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Co-Op -> Online"))
(assert (sendmessage (str-cat "Online " ?cnew))))
(deffacts rule-token-31 (token (name "rule_31")))
(defrule rule31_1
(fact (name "Competitive") (certainty ?cF604))
(not (exists (fact (name "Difficult"))))
?tk <- (token (name "rule_31"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF604) 0.9))
(assert (fact (name "Difficult") (certainty ?cnew)))
(assert (sendmessage "Competitive -> Difficult"))
(assert (sendmessage (str-cat "Difficult " ?cnew))))
(defrule rule31_2
(fact (name "Competitive") (certainty ?cF604))
?f <- (fact (name "Difficult") (certainty ?cf_))
?tk <- (token (name "rule_31"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF604) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Competitive -> Difficult"))
(assert (sendmessage (str-cat "Difficult " ?cnew))))
(deffacts rule-token-33 (token (name "rule_33")))
(defrule rule33_1
(fact (name "Action-RPG") (certainty ?cF315))
(not (exists (fact (name "3D"))))
?tk <- (token (name "rule_33"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF315) 0.9))
(assert (fact (name "3D") (certainty ?cnew)))
(assert (sendmessage "Action-RPG -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(defrule rule33_2
(fact (name "Action-RPG") (certainty ?cF315))
?f <- (fact (name "3D") (certainty ?cf_))
?tk <- (token (name "rule_33"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF315) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Action-RPG -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(deffacts rule-token-35 (token (name "rule_35")))
(defrule rule35_1
(fact (name "Roguelike") (certainty ?cF314))
(not (exists (fact (name "Difficult"))))
?tk <- (token (name "rule_35"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF314) 0.9))
(assert (fact (name "Difficult") (certainty ?cnew)))
(assert (sendmessage "Roguelike -> Difficult"))
(assert (sendmessage (str-cat "Difficult " ?cnew))))
(defrule rule35_2
(fact (name "Roguelike") (certainty ?cF314))
?f <- (fact (name "Difficult") (certainty ?cf_))
?tk <- (token (name "rule_35"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF314) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Roguelike -> Difficult"))
(assert (sendmessage (str-cat "Difficult " ?cnew))))
(deffacts rule-token-37 (token (name "rule_37")))
(defrule rule37_1
(fact (name "Multiplayer") (certainty ?cF614))
(not (exists (fact (name "Online"))))
?tk <- (token (name "rule_37"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF614) 0.9))
(assert (fact (name "Online") (certainty ?cnew)))
(assert (sendmessage "Multiplayer -> Online"))
(assert (sendmessage (str-cat "Online " ?cnew))))
(defrule rule37_2
(fact (name "Multiplayer") (certainty ?cF614))
?f <- (fact (name "Online") (certainty ?cf_))
?tk <- (token (name "rule_37"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF614) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Multiplayer -> Online"))
(assert (sendmessage (str-cat "Online " ?cnew))))
(deffacts rule-token-39 (token (name "rule_39")))
(defrule rule39_1
(fact (name "Single-Player") (certainty ?cF613))
(not (exists (fact (name "Offline"))))
?tk <- (token (name "rule_39"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF613) 0.9))
(assert (fact (name "Offline") (certainty ?cnew)))
(assert (sendmessage "Single-Player -> Offline"))
(assert (sendmessage (str-cat "Offline " ?cnew))))
(defrule rule39_2
(fact (name "Single-Player") (certainty ?cF613))
?f <- (fact (name "Offline") (certainty ?cf_))
?tk <- (token (name "rule_39"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF613) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Single-Player -> Offline"))
(assert (sendmessage (str-cat "Offline " ?cnew))))
(deffacts rule-token-41 (token (name "rule_41")))
(defrule rule41_1
(fact (name "MOBA") (certainty ?cF313))
(fact (name "Multiplayer") (certainty ?cF614))
(not (exists (fact (name "Competitive"))))
?tk <- (token (name "rule_41"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF313 ?cF614) 0.9))
(assert (fact (name "Competitive") (certainty ?cnew)))
(assert (sendmessage "MOBA, Multiplayer -> Competitive"))
(assert (sendmessage (str-cat "Competitive " ?cnew))))
(defrule rule41_2
(fact (name "MOBA") (certainty ?cF313))
(fact (name "Multiplayer") (certainty ?cF614))
?f <- (fact (name "Competitive") (certainty ?cf_))
?tk <- (token (name "rule_41"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF313 ?cF614) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "MOBA, Multiplayer -> Competitive"))
(assert (sendmessage (str-cat "Competitive " ?cnew))))
(deffacts rule-token-43 (token (name "rule_43")))
(defrule rule43_1
(fact (name "Retro") (certainty ?cF504))
(not (exists (fact (name "Pixel Graphics"))))
?tk <- (token (name "rule_43"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF504) 0.9))
(assert (fact (name "Pixel Graphics") (certainty ?cnew)))
(assert (sendmessage "Retro -> Pixel Graphics"))
(assert (sendmessage (str-cat "Pixel Graphics " ?cnew))))
(defrule rule43_2
(fact (name "Retro") (certainty ?cF504))
?f <- (fact (name "Pixel Graphics") (certainty ?cf_))
?tk <- (token (name "rule_43"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF504) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Retro -> Pixel Graphics"))
(assert (sendmessage (str-cat "Pixel Graphics " ?cnew))))
(deffacts rule-token-45 (token (name "rule_45")))
(defrule rule45_1
(fact (name "Voxel Graphics") (certainty ?cF211))
(not (exists (fact (name "3D"))))
?tk <- (token (name "rule_45"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF211) 0.9))
(assert (fact (name "3D") (certainty ?cnew)))
(assert (sendmessage "Voxel Graphics -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(defrule rule45_2
(fact (name "Voxel Graphics") (certainty ?cF211))
?f <- (fact (name "3D") (certainty ?cf_))
?tk <- (token (name "rule_45"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF211) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Voxel Graphics -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(deffacts rule-token-47 (token (name "rule_47")))
(defrule rule47_1
(fact (name "Stealth") (certainty ?cF405))
(not (exists (fact (name "Exploration"))))
?tk <- (token (name "rule_47"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF405) 0.9))
(assert (fact (name "Exploration") (certainty ?cnew)))
(assert (sendmessage "Stealth -> Exploration"))
(assert (sendmessage (str-cat "Exploration " ?cnew))))
(defrule rule47_2
(fact (name "Stealth") (certainty ?cF405))
?f <- (fact (name "Exploration") (certainty ?cf_))
?tk <- (token (name "rule_47"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF405) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Stealth -> Exploration"))
(assert (sendmessage (str-cat "Exploration " ?cnew))))
(deffacts rule-token-49 (token (name "rule_49")))
(defrule rule49_1
(fact (name "Exploration") (certainty ?cF406))
(not (exists (fact (name "Story-Driven"))))
?tk <- (token (name "rule_49"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF406) 0.9))
(assert (fact (name "Story-Driven") (certainty ?cnew)))
(assert (sendmessage "Exploration -> Story-Driven"))
(assert (sendmessage (str-cat "Story-Driven " ?cnew))))
(defrule rule49_2
(fact (name "Exploration") (certainty ?cF406))
?f <- (fact (name "Story-Driven") (certainty ?cf_))
?tk <- (token (name "rule_49"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF406) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Exploration -> Story-Driven"))
(assert (sendmessage (str-cat "Story-Driven " ?cnew))))
(deffacts rule-token-51 (token (name "rule_51")))
(defrule rule51_1
(fact (name "Story-Driven") (certainty ?cF607))
(fact (name "Indie") (certainty ?cF606))
(not (exists (fact (name "Addictive"))))
?tk <- (token (name "rule_51"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF607 ?cF606) 0.9))
(assert (fact (name "Addictive") (certainty ?cnew)))
(assert (sendmessage "Story-Driven, Indie -> Addictive"))
(assert (sendmessage (str-cat "Addictive " ?cnew))))
(defrule rule51_2
(fact (name "Story-Driven") (certainty ?cF607))
(fact (name "Indie") (certainty ?cF606))
?f <- (fact (name "Addictive") (certainty ?cf_))
?tk <- (token (name "rule_51"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF607 ?cF606) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Story-Driven, Indie -> Addictive"))
(assert (sendmessage (str-cat "Addictive " ?cnew))))
(deffacts rule-token-53 (token (name "rule_53")))
(defrule rule53_1
(fact (name "Survival Horror") (certainty ?cF310))
(fact (name "Difficult") (certainty ?cF612))
(not (exists (fact (name "Horror"))))
?tk <- (token (name "rule_53"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF310 ?cF612) 0.9))
(assert (fact (name "Horror") (certainty ?cnew)))
(assert (sendmessage "Survival Horror, Difficult -> Horror"))
(assert (sendmessage (str-cat "Horror " ?cnew))))
(defrule rule53_2
(fact (name "Survival Horror") (certainty ?cF310))
(fact (name "Difficult") (certainty ?cF612))
?f <- (fact (name "Horror") (certainty ?cf_))
?tk <- (token (name "rule_53"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF310 ?cF612) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Survival Horror, Difficult -> Horror"))
(assert (sendmessage (str-cat "Horror " ?cnew))))
(deffacts rule-token-55 (token (name "rule_55")))
(defrule rule55_1
(fact (name "Co-Op") (certainty ?cF603))
(fact (name "Survival Horror") (certainty ?cF310))
(not (exists (fact (name "3D"))))
?tk <- (token (name "rule_55"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF603 ?cF310) 0.9))
(assert (fact (name "3D") (certainty ?cnew)))
(assert (sendmessage "Co-Op, Survival Horror -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(defrule rule55_2
(fact (name "Co-Op") (certainty ?cF603))
(fact (name "Survival Horror") (certainty ?cF310))
?f <- (fact (name "3D") (certainty ?cf_))
?tk <- (token (name "rule_55"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF603 ?cF310) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Co-Op, Survival Horror -> 3D"))
(assert (sendmessage (str-cat "3D " ?cnew))))
(deffacts rule-token-57 (token (name "rule_57")))
(defrule rule57_1
(fact (name "Survival Horror") (certainty ?cF310))
(not (exists (fact (name "Survival"))))
?tk <- (token (name "rule_57"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF310) 0.9))
(assert (fact (name "Survival") (certainty ?cnew)))
(assert (sendmessage "Survival Horror -> Survival"))
(assert (sendmessage (str-cat "Survival " ?cnew))))
(defrule rule57_2
(fact (name "Survival Horror") (certainty ?cF310))
?f <- (fact (name "Survival") (certainty ?cf_))
?tk <- (token (name "rule_57"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF310) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Survival Horror -> Survival"))
(assert (sendmessage (str-cat "Survival " ?cnew))))
(deffacts rule-token-62 (token (name "rule_62")))
(defrule rule62_1
(fact (name "Shooter") (certainty ?cF302))
(fact (name "Destructibility") (certainty ?cF207))
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
(not (exists (fact (name "Battlefield"))))
?tk <- (token (name "rule_62"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF302 ?cF207 ?cF205 ?cF601) 0.9))
(assert (fact (name "Battlefield") (certainty ?cnew)))
(assert (sendmessage "Shooter, Destructibility, 3D, Online -> Battlefield"))
(assert (sendmessage (str-cat "Battlefield " ?cnew))))
(defrule rule62_2
(fact (name "Shooter") (certainty ?cF302))
(fact (name "Destructibility") (certainty ?cF207))
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
?f <- (fact (name "Battlefield") (certainty ?cf_))
?tk <- (token (name "rule_62"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF302 ?cF207 ?cF205 ?cF601) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Shooter, Destructibility, 3D, Online -> Battlefield"))
(assert (sendmessage (str-cat "Battlefield " ?cnew))))
(deffacts rule-token-64 (token (name "rule_64")))
(defrule rule64_1
(fact (name "Battlefield") (certainty ?cF101))
(fact (name "Bad") (certainty ?cF701))
(not (exists (fact (name "Battlefield 2042"))))
?tk <- (token (name "rule_64"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF101 ?cF701) 0.9))
(assert (fact (name "Battlefield 2042") (certainty ?cnew)))
(assert (sendmessage "Battlefield, Bad -> Battlefield 2042"))
(assert (sendmessage (str-cat "Battlefield 2042 " ?cnew))))
(defrule rule64_2
(fact (name "Battlefield") (certainty ?cF101))
(fact (name "Bad") (certainty ?cF701))
?f <- (fact (name "Battlefield 2042") (certainty ?cf_))
?tk <- (token (name "rule_64"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF101 ?cF701) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Battlefield, Bad -> Battlefield 2042"))
(assert (sendmessage (str-cat "Battlefield 2042 " ?cnew))))
(deffacts rule-token-66 (token (name "rule_66")))
(defrule rule66_1
(fact (name "Battlefield") (certainty ?cF101))
(fact (name "Historical") (certainty ?cF503))
(not (exists (fact (name "Battlefield 1"))))
?tk <- (token (name "rule_66"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF101 ?cF503) 0.9))
(assert (fact (name "Battlefield 1") (certainty ?cnew)))
(assert (sendmessage "Battlefield, Historical -> Battlefield 1"))
(assert (sendmessage (str-cat "Battlefield 1 " ?cnew))))
(defrule rule66_2
(fact (name "Battlefield") (certainty ?cF101))
(fact (name "Historical") (certainty ?cF503))
?f <- (fact (name "Battlefield 1") (certainty ?cf_))
?tk <- (token (name "rule_66"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF101 ?cF503) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Battlefield, Historical -> Battlefield 1"))
(assert (sendmessage (str-cat "Battlefield 1 " ?cnew))))
(deffacts rule-token-68 (token (name "rule_68")))
(defrule rule68_1
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
(fact (name "Survival Horror") (certainty ?cF310))
(not (exists (fact (name "Lethal Company"))))
?tk <- (token (name "rule_68"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF205 ?cF601 ?cF310) 0.9))
(assert (fact (name "Lethal Company") (certainty ?cnew)))
(assert (sendmessage "3D, Online, Survival Horror -> Lethal Company"))
(assert (sendmessage (str-cat "Lethal Company " ?cnew))))
(defrule rule68_2
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
(fact (name "Survival Horror") (certainty ?cF310))
?f <- (fact (name "Lethal Company") (certainty ?cf_))
?tk <- (token (name "rule_68"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF205 ?cF601 ?cF310) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "3D, Online, Survival Horror -> Lethal Company"))
(assert (sendmessage (str-cat "Lethal Company " ?cnew))))
(deffacts rule-token-70 (token (name "rule_70")))
(defrule rule70_1
(fact (name "Story-Driven") (certainty ?cF607))
(fact (name "Offline") (certainty ?cF602))
(fact (name "3D") (certainty ?cF205))
(fact (name "Puzzle") (certainty ?cF305))
(not (exists (fact (name "Stanley Parable"))))
?tk <- (token (name "rule_70"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF607 ?cF602 ?cF205 ?cF305) 0.9))
(assert (fact (name "Stanley Parable") (certainty ?cnew)))
(assert (sendmessage "Story-Driven, Offline, 3D, Puzzle -> Stanley Parable"))
(assert (sendmessage (str-cat "Stanley Parable " ?cnew))))
(defrule rule70_2
(fact (name "Story-Driven") (certainty ?cF607))
(fact (name "Offline") (certainty ?cF602))
(fact (name "3D") (certainty ?cF205))
(fact (name "Puzzle") (certainty ?cF305))
?f <- (fact (name "Stanley Parable") (certainty ?cf_))
?tk <- (token (name "rule_70"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF607 ?cF602 ?cF205 ?cF305) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Story-Driven, Offline, 3D, Puzzle -> Stanley Parable"))
(assert (sendmessage (str-cat "Stanley Parable " ?cnew))))
(deffacts rule-token-72 (token (name "rule_72")))
(defrule rule72_1
(fact (name "Class-Based Shooter") (certainty ?cF401))
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
(fact (name "Classic") (certainty ?cF702))
(not (exists (fact (name "Team Fortress 2"))))
?tk <- (token (name "rule_72"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF401 ?cF205 ?cF601 ?cF702) 0.9))
(assert (fact (name "Team Fortress 2") (certainty ?cnew)))
(assert (sendmessage "Class-Based Shooter, 3D, Online, Classic -> Team Fortress 2"))
(assert (sendmessage (str-cat "Team Fortress 2 " ?cnew))))
(defrule rule72_2
(fact (name "Class-Based Shooter") (certainty ?cF401))
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
(fact (name "Classic") (certainty ?cF702))
?f <- (fact (name "Team Fortress 2") (certainty ?cf_))
?tk <- (token (name "rule_72"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF401 ?cF205 ?cF601 ?cF702) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Class-Based Shooter, 3D, Online, Classic -> Team Fortress 2"))
(assert (sendmessage (str-cat "Team Fortress 2 " ?cnew))))
(deffacts rule-token-74 (token (name "rule_74")))
(defrule rule74_1
(fact (name "Class-Based Shooter") (certainty ?cF401))
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
(fact (name "Bad") (certainty ?cF701))
(not (exists (fact (name "Overwatch"))))
?tk <- (token (name "rule_74"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF401 ?cF205 ?cF601 ?cF701) 0.9))
(assert (fact (name "Overwatch") (certainty ?cnew)))
(assert (sendmessage "Class-Based Shooter, 3D, Online, Bad -> Overwatch"))
(assert (sendmessage (str-cat "Overwatch " ?cnew))))
(defrule rule74_2
(fact (name "Class-Based Shooter") (certainty ?cF401))
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
(fact (name "Bad") (certainty ?cF701))
?f <- (fact (name "Overwatch") (certainty ?cf_))
?tk <- (token (name "rule_74"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF401 ?cF205 ?cF601 ?cF701) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Class-Based Shooter, 3D, Online, Bad -> Overwatch"))
(assert (sendmessage (str-cat "Overwatch " ?cnew))))
(deffacts rule-token-76 (token (name "rule_76")))
(defrule rule76_1
(fact (name "Shooter") (certainty ?cF302))
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
(fact (name "Competitive") (certainty ?cF604))
(not (exists (fact (name "Counter Strike"))))
?tk <- (token (name "rule_76"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF302 ?cF205 ?cF601 ?cF604) 0.9))
(assert (fact (name "Counter Strike") (certainty ?cnew)))
(assert (sendmessage "Shooter, 3D, Online, Competitive -> Counter Strike"))
(assert (sendmessage (str-cat "Counter Strike " ?cnew))))
(defrule rule76_2
(fact (name "Shooter") (certainty ?cF302))
(fact (name "3D") (certainty ?cF205))
(fact (name "Online") (certainty ?cF601))
(fact (name "Competitive") (certainty ?cF604))
?f <- (fact (name "Counter Strike") (certainty ?cf_))
?tk <- (token (name "rule_76"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF302 ?cF205 ?cF601 ?cF604) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Shooter, 3D, Online, Competitive -> Counter Strike"))
(assert (sendmessage (str-cat "Counter Strike " ?cnew))))
(deffacts rule-token-78 (token (name "rule_78")))
(defrule rule78_1
(fact (name "Counter Strike") (certainty ?cF126))
(fact (name "Old") (certainty ?cF609))
(not (exists (fact (name "Counter Strike 1.6"))))
?tk <- (token (name "rule_78"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF126 ?cF609) 0.9))
(assert (fact (name "Counter Strike 1.6") (certainty ?cnew)))
(assert (sendmessage "Counter Strike, Old -> Counter Strike 1.6"))
(assert (sendmessage (str-cat "Counter Strike 1.6 " ?cnew))))
(defrule rule78_2
(fact (name "Counter Strike") (certainty ?cF126))
(fact (name "Old") (certainty ?cF609))
?f <- (fact (name "Counter Strike 1.6") (certainty ?cf_))
?tk <- (token (name "rule_78"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF126 ?cF609) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Counter Strike, Old -> Counter Strike 1.6"))
(assert (sendmessage (str-cat "Counter Strike 1.6 " ?cnew))))
(deffacts rule-token-80 (token (name "rule_80")))
(defrule rule80_1
(fact (name "Counter Strike") (certainty ?cF126))
(fact (name "New") (certainty ?cF608))
(not (exists (fact (name "Counter Strike 2"))))
?tk <- (token (name "rule_80"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF126 ?cF608) 0.9))
(assert (fact (name "Counter Strike 2") (certainty ?cnew)))
(assert (sendmessage "Counter Strike, New -> Counter Strike 2"))
(assert (sendmessage (str-cat "Counter Strike 2 " ?cnew))))
(defrule rule80_2
(fact (name "Counter Strike") (certainty ?cF126))
(fact (name "New") (certainty ?cF608))
?f <- (fact (name "Counter Strike 2") (certainty ?cf_))
?tk <- (token (name "rule_80"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF126 ?cF608) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Counter Strike, New -> Counter Strike 2"))
(assert (sendmessage (str-cat "Counter Strike 2 " ?cnew))))
(deffacts rule-token-82 (token (name "rule_82")))
(defrule rule82_1
(fact (name "RPG") (certainty ?cF306))
(fact (name "Casual") (certainty ?cF308))
(fact (name "Top-down View") (certainty ?cF208))
(fact (name "Indie") (certainty ?cF606))
(not (exists (fact (name "Stardew Valley"))))
?tk <- (token (name "rule_82"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF306 ?cF308 ?cF208 ?cF606) 0.9))
(assert (fact (name "Stardew Valley") (certainty ?cnew)))
(assert (sendmessage "RPG, Casual, Top-down View, Indie -> Stardew Valley"))
(assert (sendmessage (str-cat "Stardew Valley " ?cnew))))
(defrule rule82_2
(fact (name "RPG") (certainty ?cF306))
(fact (name "Casual") (certainty ?cF308))
(fact (name "Top-down View") (certainty ?cF208))
(fact (name "Indie") (certainty ?cF606))
?f <- (fact (name "Stardew Valley") (certainty ?cf_))
?tk <- (token (name "rule_82"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF306 ?cF308 ?cF208 ?cF606) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "RPG, Casual, Top-down View, Indie -> Stardew Valley"))
(assert (sendmessage (str-cat "Stardew Valley " ?cnew))))
(deffacts rule-token-84 (token (name "rule_84")))
(defrule rule84_1
(fact (name "Sandbox") (certainty ?cF307))
(fact (name "3D") (certainty ?cF205))
(fact (name "Resource Management") (certainty ?cF404))
(not (exists (fact (name "Minecraft"))))
?tk <- (token (name "rule_84"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF307 ?cF205 ?cF404) 0.9))
(assert (fact (name "Minecraft") (certainty ?cnew)))
(assert (sendmessage "Sandbox, 3D, Resource Management -> Minecraft"))
(assert (sendmessage (str-cat "Minecraft " ?cnew))))
(defrule rule84_2
(fact (name "Sandbox") (certainty ?cF307))
(fact (name "3D") (certainty ?cF205))
(fact (name "Resource Management") (certainty ?cF404))
?f <- (fact (name "Minecraft") (certainty ?cf_))
?tk <- (token (name "rule_84"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF307 ?cF205 ?cF404) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Sandbox, 3D, Resource Management -> Minecraft"))
(assert (sendmessage (str-cat "Minecraft " ?cnew))))
(deffacts rule-token-86 (token (name "rule_86")))
(defrule rule86_1
(fact (name "Sandbox") (certainty ?cF307))
(fact (name "2D") (certainty ?cF206))
(fact (name "RPG") (certainty ?cF306))
(fact (name "Resource Management") (certainty ?cF404))
(not (exists (fact (name "Terraria"))))
?tk <- (token (name "rule_86"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF307 ?cF206 ?cF306 ?cF404) 0.9))
(assert (fact (name "Terraria") (certainty ?cnew)))
(assert (sendmessage "Sandbox, 2D, RPG, Resource Management -> Terraria"))
(assert (sendmessage (str-cat "Terraria " ?cnew))))
(defrule rule86_2
(fact (name "Sandbox") (certainty ?cF307))
(fact (name "2D") (certainty ?cF206))
(fact (name "RPG") (certainty ?cF306))
(fact (name "Resource Management") (certainty ?cF404))
?f <- (fact (name "Terraria") (certainty ?cf_))
?tk <- (token (name "rule_86"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF307 ?cF206 ?cF306 ?cF404) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Sandbox, 2D, RPG, Resource Management -> Terraria"))
(assert (sendmessage (str-cat "Terraria " ?cnew))))
(deffacts rule-token-88 (token (name "rule_88")))
(defrule rule88_1
(fact (name "Platformer") (certainty ?cF303))
(fact (name "Side View") (certainty ?cF209))
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Offline") (certainty ?cF602))
(not (exists (fact (name "Cuphead"))))
?tk <- (token (name "rule_88"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF303 ?cF209 ?cF612 ?cF602) 0.9))
(assert (fact (name "Cuphead") (certainty ?cnew)))
(assert (sendmessage "Platformer, Side View, Difficult, Offline -> Cuphead"))
(assert (sendmessage (str-cat "Cuphead " ?cnew))))
(defrule rule88_2
(fact (name "Platformer") (certainty ?cF303))
(fact (name "Side View") (certainty ?cF209))
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Offline") (certainty ?cF602))
?f <- (fact (name "Cuphead") (certainty ?cf_))
?tk <- (token (name "rule_88"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF303 ?cF209 ?cF612 ?cF602) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Platformer, Side View, Difficult, Offline -> Cuphead"))
(assert (sendmessage (str-cat "Cuphead " ?cnew))))
(deffacts rule-token-90 (token (name "rule_90")))
(defrule rule90_1
(fact (name "Survival") (certainty ?cF402))
(fact (name "3D") (certainty ?cF205))
(fact (name "Resource Management") (certainty ?cF404))
(not (exists (fact (name "The Long Dark"))))
?tk <- (token (name "rule_90"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF402 ?cF205 ?cF404) 0.9))
(assert (fact (name "The Long Dark") (certainty ?cnew)))
(assert (sendmessage "Survival, 3D, Resource Management -> The Long Dark"))
(assert (sendmessage (str-cat "The Long Dark " ?cnew))))
(defrule rule90_2
(fact (name "Survival") (certainty ?cF402))
(fact (name "3D") (certainty ?cF205))
(fact (name "Resource Management") (certainty ?cF404))
?f <- (fact (name "The Long Dark") (certainty ?cf_))
?tk <- (token (name "rule_90"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF402 ?cF205 ?cF404) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Survival, 3D, Resource Management -> The Long Dark"))
(assert (sendmessage (str-cat "The Long Dark " ?cnew))))
(deffacts rule-token-92 (token (name "rule_92")))
(defrule rule92_1
(fact (name "Classic") (certainty ?cF702))
(fact (name "Side View") (certainty ?cF209))
(fact (name "Rhythm Game") (certainty ?cF301))
(fact (name "Difficult") (certainty ?cF612))
(not (exists (fact (name "Chronoheart"))))
?tk <- (token (name "rule_92"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF702 ?cF209 ?cF301 ?cF612) 0.9))
(assert (fact (name "Chronoheart") (certainty ?cnew)))
(assert (sendmessage "Classic, Side View, Rhythm Game, Difficult -> Chronoheart"))
(assert (sendmessage (str-cat "Chronoheart " ?cnew))))
(defrule rule92_2
(fact (name "Classic") (certainty ?cF702))
(fact (name "Side View") (certainty ?cF209))
(fact (name "Rhythm Game") (certainty ?cF301))
(fact (name "Difficult") (certainty ?cF612))
?f <- (fact (name "Chronoheart") (certainty ?cf_))
?tk <- (token (name "rule_92"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF702 ?cF209 ?cF301 ?cF612) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Classic, Side View, Rhythm Game, Difficult -> Chronoheart"))
(assert (sendmessage (str-cat "Chronoheart " ?cnew))))
(deffacts rule-token-94 (token (name "rule_94")))
(defrule rule94_1
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Turn-Based") (certainty ?cF311))
(fact (name "Historical") (certainty ?cF503))
(not (exists (fact (name "Civilization"))))
?tk <- (token (name "rule_94"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF304 ?cF311 ?cF503) 0.9))
(assert (fact (name "Civilization") (certainty ?cnew)))
(assert (sendmessage "Strategy, Turn-Based, Historical -> Civilization"))
(assert (sendmessage (str-cat "Civilization " ?cnew))))
(defrule rule94_2
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Turn-Based") (certainty ?cF311))
(fact (name "Historical") (certainty ?cF503))
?f <- (fact (name "Civilization") (certainty ?cf_))
?tk <- (token (name "rule_94"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF304 ?cF311 ?cF503) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Strategy, Turn-Based, Historical -> Civilization"))
(assert (sendmessage (str-cat "Civilization " ?cnew))))
(deffacts rule-token-96 (token (name "rule_96")))
(defrule rule96_1
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Real-Time") (certainty ?cF312))
(fact (name "Historical") (certainty ?cF503))
(not (exists (fact (name "Hearts of Iron"))))
?tk <- (token (name "rule_96"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF304 ?cF312 ?cF503) 0.9))
(assert (fact (name "Hearts of Iron") (certainty ?cnew)))
(assert (sendmessage "Strategy, Real-Time, Historical -> Hearts of Iron"))
(assert (sendmessage (str-cat "Hearts of Iron " ?cnew))))
(defrule rule96_2
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Real-Time") (certainty ?cF312))
(fact (name "Historical") (certainty ?cF503))
?f <- (fact (name "Hearts of Iron") (certainty ?cf_))
?tk <- (token (name "rule_96"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF304 ?cF312 ?cF503) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Strategy, Real-Time, Historical -> Hearts of Iron"))
(assert (sendmessage (str-cat "Hearts of Iron " ?cnew))))
(deffacts rule-token-98 (token (name "rule_98")))
(defrule rule98_1
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Turn-Based") (certainty ?cF311))
(fact (name "Sci-Fi") (certainty ?cF502))
(not (exists (fact (name "XCOM"))))
?tk <- (token (name "rule_98"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF304 ?cF311 ?cF502) 0.9))
(assert (fact (name "XCOM") (certainty ?cnew)))
(assert (sendmessage "Strategy, Turn-Based, Sci-Fi -> XCOM"))
(assert (sendmessage (str-cat "XCOM " ?cnew))))
(defrule rule98_2
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Turn-Based") (certainty ?cF311))
(fact (name "Sci-Fi") (certainty ?cF502))
?f <- (fact (name "XCOM") (certainty ?cf_))
?tk <- (token (name "rule_98"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF304 ?cF311 ?cF502) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Strategy, Turn-Based, Sci-Fi -> XCOM"))
(assert (sendmessage (str-cat "XCOM " ?cnew))))
(deffacts rule-token-100 (token (name "rule_100")))
(defrule rule100_1
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Classic") (certainty ?cF702))
(fact (name "Old") (certainty ?cF609))
(not (exists (fact (name "Heroes of Might and Magic"))))
?tk <- (token (name "rule_100"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF304 ?cF702 ?cF609) 0.9))
(assert (fact (name "Heroes of Might and Magic") (certainty ?cnew)))
(assert (sendmessage "Strategy, Classic, Old -> Heroes of Might and Magic"))
(assert (sendmessage (str-cat "Heroes of Might and Magic " ?cnew))))
(defrule rule100_2
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Classic") (certainty ?cF702))
(fact (name "Old") (certainty ?cF609))
?f <- (fact (name "Heroes of Might and Magic") (certainty ?cf_))
?tk <- (token (name "rule_100"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF304 ?cF702 ?cF609) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Strategy, Classic, Old -> Heroes of Might and Magic"))
(assert (sendmessage (str-cat "Heroes of Might and Magic " ?cnew))))
(deffacts rule-token-102 (token (name "rule_102")))
(defrule rule102_1
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Competitive") (certainty ?cF604))
(fact (name "Real-Time") (certainty ?cF312))
(not (exists (fact (name "Starcraft"))))
?tk <- (token (name "rule_102"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF304 ?cF604 ?cF312) 0.9))
(assert (fact (name "Starcraft") (certainty ?cnew)))
(assert (sendmessage "Strategy, Competitive, Real-Time -> Starcraft"))
(assert (sendmessage (str-cat "Starcraft " ?cnew))))
(defrule rule102_2
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Competitive") (certainty ?cF604))
(fact (name "Real-Time") (certainty ?cF312))
?f <- (fact (name "Starcraft") (certainty ?cf_))
?tk <- (token (name "rule_102"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF304 ?cF604 ?cF312) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Strategy, Competitive, Real-Time -> Starcraft"))
(assert (sendmessage (str-cat "Starcraft " ?cnew))))
(deffacts rule-token-104 (token (name "rule_104")))
(defrule rule104_1
(fact (name "3D") (certainty ?cF205))
(fact (name "RPG") (certainty ?cF306))
(fact (name "Fantasy") (certainty ?cF501))
(fact (name "Story-Driven") (certainty ?cF607))
(fact (name "Offline") (certainty ?cF602))
(not (exists (fact (name "Skyrim"))))
?tk <- (token (name "rule_104"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF205 ?cF306 ?cF501 ?cF607 ?cF602) 0.9))
(assert (fact (name "Skyrim") (certainty ?cnew)))
(assert (sendmessage "3D, RPG, Fantasy, Story-Driven, Offline -> Skyrim"))
(assert (sendmessage (str-cat "Skyrim " ?cnew))))
(defrule rule104_2
(fact (name "3D") (certainty ?cF205))
(fact (name "RPG") (certainty ?cF306))
(fact (name "Fantasy") (certainty ?cF501))
(fact (name "Story-Driven") (certainty ?cF607))
(fact (name "Offline") (certainty ?cF602))
?f <- (fact (name "Skyrim") (certainty ?cf_))
?tk <- (token (name "rule_104"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF205 ?cF306 ?cF501 ?cF607 ?cF602) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "3D, RPG, Fantasy, Story-Driven, Offline -> Skyrim"))
(assert (sendmessage (str-cat "Skyrim " ?cnew))))
(deffacts rule-token-106 (token (name "rule_106")))
(defrule rule106_1
(fact (name "Resource Management") (certainty ?cF404))
(fact (name "Top-down View") (certainty ?cF208))
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Sci-Fi") (certainty ?cF502))
(not (exists (fact (name "Factorio"))))
?tk <- (token (name "rule_106"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF404 ?cF208 ?cF612 ?cF502) 0.9))
(assert (fact (name "Factorio") (certainty ?cnew)))
(assert (sendmessage "Resource Management, Top-down View, Difficult, Sci-Fi -> Factorio"))
(assert (sendmessage (str-cat "Factorio " ?cnew))))
(defrule rule106_2
(fact (name "Resource Management") (certainty ?cF404))
(fact (name "Top-down View") (certainty ?cF208))
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Sci-Fi") (certainty ?cF502))
?f <- (fact (name "Factorio") (certainty ?cf_))
?tk <- (token (name "rule_106"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF404 ?cF208 ?cF612 ?cF502) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Resource Management, Top-down View, Difficult, Sci-Fi -> Factorio"))
(assert (sendmessage (str-cat "Factorio " ?cnew))))
(deffacts rule-token-108 (token (name "rule_108")))
(defrule rule108_1
(fact (name "Rhythm Game") (certainty ?cF301))
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Free") (certainty ?cF610))
(not (exists (fact (name "OSU"))))
?tk <- (token (name "rule_108"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF301 ?cF612 ?cF610) 0.9))
(assert (fact (name "OSU") (certainty ?cnew)))
(assert (sendmessage "Rhythm Game, Difficult, Free -> OSU"))
(assert (sendmessage (str-cat "OSU " ?cnew))))
(defrule rule108_2
(fact (name "Rhythm Game") (certainty ?cF301))
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Free") (certainty ?cF610))
?f <- (fact (name "OSU") (certainty ?cf_))
?tk <- (token (name "rule_108"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF301 ?cF612 ?cF610) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Rhythm Game, Difficult, Free -> OSU"))
(assert (sendmessage (str-cat "OSU " ?cnew))))
(deffacts rule-token-110 (token (name "rule_110")))
(defrule rule110_1
(fact (name "Action-RPG") (certainty ?cF315))
(fact (name "3D") (certainty ?cF205))
(fact (name "Story-Driven") (certainty ?cF607))
(not (exists (fact (name "Ghost of Tsushima"))))
?tk <- (token (name "rule_110"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF315 ?cF205 ?cF607) 0.9))
(assert (fact (name "Ghost of Tsushima") (certainty ?cnew)))
(assert (sendmessage "Action-RPG, 3D, Story-Driven -> Ghost of Tsushima"))
(assert (sendmessage (str-cat "Ghost of Tsushima " ?cnew))))
(defrule rule110_2
(fact (name "Action-RPG") (certainty ?cF315))
(fact (name "3D") (certainty ?cF205))
(fact (name "Story-Driven") (certainty ?cF607))
?f <- (fact (name "Ghost of Tsushima") (certainty ?cf_))
?tk <- (token (name "rule_110"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF315 ?cF205 ?cF607) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Action-RPG, 3D, Story-Driven -> Ghost of Tsushima"))
(assert (sendmessage (str-cat "Ghost of Tsushima " ?cnew))))
(deffacts rule-token-112 (token (name "rule_112")))
(defrule rule112_1
(fact (name "Roguelike") (certainty ?cF314))
(fact (name "Side View") (certainty ?cF209))
(fact (name "Difficult") (certainty ?cF612))
(not (exists (fact (name "Darkest Dungeon"))))
?tk <- (token (name "rule_112"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF314 ?cF209 ?cF612) 0.9))
(assert (fact (name "Darkest Dungeon") (certainty ?cnew)))
(assert (sendmessage "Roguelike, Side View, Difficult -> Darkest Dungeon"))
(assert (sendmessage (str-cat "Darkest Dungeon " ?cnew))))
(defrule rule112_2
(fact (name "Roguelike") (certainty ?cF314))
(fact (name "Side View") (certainty ?cF209))
(fact (name "Difficult") (certainty ?cF612))
?f <- (fact (name "Darkest Dungeon") (certainty ?cf_))
?tk <- (token (name "rule_112"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF314 ?cF209 ?cF612) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Roguelike, Side View, Difficult -> Darkest Dungeon"))
(assert (sendmessage (str-cat "Darkest Dungeon " ?cnew))))
(deffacts rule-token-114 (token (name "rule_114")))
(defrule rule114_1
(fact (name "Addictive") (certainty ?cF616))
(fact (name "Free Expansions") (certainty ?cF615))
(not (exists (fact (name "Fortnite"))))
?tk <- (token (name "rule_114"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF616 ?cF615) 0.9))
(assert (fact (name "Fortnite") (certainty ?cnew)))
(assert (sendmessage "Addictive, Free Expansions -> Fortnite"))
(assert (sendmessage (str-cat "Fortnite " ?cnew))))
(defrule rule114_2
(fact (name "Addictive") (certainty ?cF616))
(fact (name "Free Expansions") (certainty ?cF615))
?f <- (fact (name "Fortnite") (certainty ?cf_))
?tk <- (token (name "rule_114"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF616 ?cF615) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Addictive, Free Expansions -> Fortnite"))
(assert (sendmessage (str-cat "Fortnite " ?cnew))))
(deffacts rule-token-116 (token (name "rule_116")))
(defrule rule116_1
(fact (name "Fantasy") (certainty ?cF501))
(fact (name "Turn-Based") (certainty ?cF311))
(fact (name "RPG") (certainty ?cF306))
(not (exists (fact (name "Baldur's Gate 3"))))
?tk <- (token (name "rule_116"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF501 ?cF311 ?cF306) 0.9))
(assert (fact (name "Baldur's Gate 3") (certainty ?cnew)))
(assert (sendmessage "Fantasy, Turn-Based, RPG -> Baldur's Gate 3"))
(assert (sendmessage (str-cat "Baldur's Gate 3 " ?cnew))))
(defrule rule116_2
(fact (name "Fantasy") (certainty ?cF501))
(fact (name "Turn-Based") (certainty ?cF311))
(fact (name "RPG") (certainty ?cF306))
?f <- (fact (name "Baldur's Gate 3") (certainty ?cf_))
?tk <- (token (name "rule_116"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF501 ?cF311 ?cF306) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Fantasy, Turn-Based, RPG -> Baldur's Gate 3"))
(assert (sendmessage (str-cat "Baldur's Gate 3 " ?cnew))))
(deffacts rule-token-118 (token (name "rule_118")))
(defrule rule118_1
(fact (name "MOBA") (certainty ?cF313))
(fact (name "Online") (certainty ?cF601))
(fact (name "Competitive") (certainty ?cF604))
(not (exists (fact (name "League of Legends"))))
?tk <- (token (name "rule_118"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF313 ?cF601 ?cF604) 0.9))
(assert (fact (name "League of Legends") (certainty ?cnew)))
(assert (sendmessage "MOBA, Online, Competitive -> League of Legends"))
(assert (sendmessage (str-cat "League of Legends " ?cnew))))
(defrule rule118_2
(fact (name "MOBA") (certainty ?cF313))
(fact (name "Online") (certainty ?cF601))
(fact (name "Competitive") (certainty ?cF604))
?f <- (fact (name "League of Legends") (certainty ?cf_))
?tk <- (token (name "rule_118"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF313 ?cF601 ?cF604) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "MOBA, Online, Competitive -> League of Legends"))
(assert (sendmessage (str-cat "League of Legends " ?cnew))))
(deffacts rule-token-120 (token (name "rule_120")))
(defrule rule120_1
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Fantasy") (certainty ?cF501))
(fact (name "Turn-Based") (certainty ?cF311))
(not (exists (fact (name "Heroes of Might and Magic"))))
?tk <- (token (name "rule_120"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF304 ?cF501 ?cF311) 0.9))
(assert (fact (name "Heroes of Might and Magic") (certainty ?cnew)))
(assert (sendmessage "Strategy, Fantasy, Turn-Based -> Heroes of Might and Magic"))
(assert (sendmessage (str-cat "Heroes of Might and Magic " ?cnew))))
(defrule rule120_2
(fact (name "Strategy") (certainty ?cF304))
(fact (name "Fantasy") (certainty ?cF501))
(fact (name "Turn-Based") (certainty ?cF311))
?f <- (fact (name "Heroes of Might and Magic") (certainty ?cf_))
?tk <- (token (name "rule_120"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF304 ?cF501 ?cF311) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Strategy, Fantasy, Turn-Based -> Heroes of Might and Magic"))
(assert (sendmessage (str-cat "Heroes of Might and Magic " ?cnew))))
(deffacts rule-token-122 (token (name "rule_122")))
(defrule rule122_1
(fact (name "Single-Player") (certainty ?cF613))
(fact (name "Fantasy") (certainty ?cF501))
(fact (name "RPG") (certainty ?cF306))
(not (exists (fact (name "The Witcher 3"))))
?tk <- (token (name "rule_122"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF613 ?cF501 ?cF306) 0.9))
(assert (fact (name "The Witcher 3") (certainty ?cnew)))
(assert (sendmessage "Single-Player, Fantasy, RPG -> The Witcher 3"))
(assert (sendmessage (str-cat "The Witcher 3 " ?cnew))))
(defrule rule122_2
(fact (name "Single-Player") (certainty ?cF613))
(fact (name "Fantasy") (certainty ?cF501))
(fact (name "RPG") (certainty ?cF306))
?f <- (fact (name "The Witcher 3") (certainty ?cf_))
?tk <- (token (name "rule_122"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF613 ?cF501 ?cF306) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Single-Player, Fantasy, RPG -> The Witcher 3"))
(assert (sendmessage (str-cat "The Witcher 3 " ?cnew))))
(deffacts rule-token-124 (token (name "rule_124")))
(defrule rule124_1
(fact (name "Simulator") (certainty ?cF316))
(fact (name "Addictive") (certainty ?cF616))
(fact (name "Base Building") (certainty ?cF408))
(not (exists (fact (name "The Sims 4"))))
?tk <- (token (name "rule_124"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF316 ?cF616 ?cF408) 0.9))
(assert (fact (name "The Sims 4") (certainty ?cnew)))
(assert (sendmessage "Simulator, Addictive, Base Building -> The Sims 4"))
(assert (sendmessage (str-cat "The Sims 4 " ?cnew))))
(defrule rule124_2
(fact (name "Simulator") (certainty ?cF316))
(fact (name "Addictive") (certainty ?cF616))
(fact (name "Base Building") (certainty ?cF408))
?f <- (fact (name "The Sims 4") (certainty ?cf_))
?tk <- (token (name "rule_124"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF316 ?cF616 ?cF408) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Simulator, Addictive, Base Building -> The Sims 4"))
(assert (sendmessage (str-cat "The Sims 4 " ?cnew))))
(deffacts rule-token-126 (token (name "rule_126")))
(defrule rule126_1
(fact (name "Action-RPG") (certainty ?cF315))
(fact (name "Realistic Graphics") (certainty ?cF203))
(fact (name "3D") (certainty ?cF205))
(not (exists (fact (name "Cyberpunk 2077"))))
?tk <- (token (name "rule_126"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF315 ?cF203 ?cF205) 0.9))
(assert (fact (name "Cyberpunk 2077") (certainty ?cnew)))
(assert (sendmessage "Action-RPG, Realistic Graphics, 3D -> Cyberpunk 2077"))
(assert (sendmessage (str-cat "Cyberpunk 2077 " ?cnew))))
(defrule rule126_2
(fact (name "Action-RPG") (certainty ?cF315))
(fact (name "Realistic Graphics") (certainty ?cF203))
(fact (name "3D") (certainty ?cF205))
?f <- (fact (name "Cyberpunk 2077") (certainty ?cf_))
?tk <- (token (name "rule_126"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF315 ?cF203 ?cF205) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Action-RPG, Realistic Graphics, 3D -> Cyberpunk 2077"))
(assert (sendmessage (str-cat "Cyberpunk 2077 " ?cnew))))
(deffacts rule-token-128 (token (name "rule_128")))
(defrule rule128_1
(fact (name "Crafting") (certainty ?cF407))
(fact (name "Base Building") (certainty ?cF408))
(fact (name "Addictive") (certainty ?cF616))
(not (exists (fact (name "Minecraft"))))
?tk <- (token (name "rule_128"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF407 ?cF408 ?cF616) 0.9))
(assert (fact (name "Minecraft") (certainty ?cnew)))
(assert (sendmessage "Crafting, Base Building, Addictive -> Minecraft"))
(assert (sendmessage (str-cat "Minecraft " ?cnew))))
(defrule rule128_2
(fact (name "Crafting") (certainty ?cF407))
(fact (name "Base Building") (certainty ?cF408))
(fact (name "Addictive") (certainty ?cF616))
?f <- (fact (name "Minecraft") (certainty ?cf_))
?tk <- (token (name "rule_128"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF407 ?cF408 ?cF616) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Crafting, Base Building, Addictive -> Minecraft"))
(assert (sendmessage (str-cat "Minecraft " ?cnew))))
(deffacts rule-token-130 (token (name "rule_130")))
(defrule rule130_1
(fact (name "Base Building") (certainty ?cF408))
(fact (name "Simulator") (certainty ?cF316))
(fact (name "Online") (certainty ?cF601))
(not (exists (fact (name "Fallout Shelter"))))
?tk <- (token (name "rule_130"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF408 ?cF316 ?cF601) 0.9))
(assert (fact (name "Fallout Shelter") (certainty ?cnew)))
(assert (sendmessage "Base Building, Simulator, Online -> Fallout Shelter"))
(assert (sendmessage (str-cat "Fallout Shelter " ?cnew))))
(defrule rule130_2
(fact (name "Base Building") (certainty ?cF408))
(fact (name "Simulator") (certainty ?cF316))
(fact (name "Online") (certainty ?cF601))
?f <- (fact (name "Fallout Shelter") (certainty ?cf_))
?tk <- (token (name "rule_130"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF408 ?cF316 ?cF601) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Base Building, Simulator, Online -> Fallout Shelter"))
(assert (sendmessage (str-cat "Fallout Shelter " ?cnew))))
(deffacts rule-token-132 (token (name "rule_132")))
(defrule rule132_1
(fact (name "MOBA") (certainty ?cF313))
(fact (name "Realistic Graphics") (certainty ?cF203))
(fact (name "Competitive") (certainty ?cF604))
(not (exists (fact (name "Apex Legends"))))
?tk <- (token (name "rule_132"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF313 ?cF203 ?cF604) 0.9))
(assert (fact (name "Apex Legends") (certainty ?cnew)))
(assert (sendmessage "MOBA, Realistic Graphics, Competitive -> Apex Legends"))
(assert (sendmessage (str-cat "Apex Legends " ?cnew))))
(defrule rule132_2
(fact (name "MOBA") (certainty ?cF313))
(fact (name "Realistic Graphics") (certainty ?cF203))
(fact (name "Competitive") (certainty ?cF604))
?f <- (fact (name "Apex Legends") (certainty ?cf_))
?tk <- (token (name "rule_132"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF313 ?cF203 ?cF604) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "MOBA, Realistic Graphics, Competitive -> Apex Legends"))
(assert (sendmessage (str-cat "Apex Legends " ?cnew))))
(deffacts rule-token-134 (token (name "rule_134")))
(defrule rule134_1
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Platformer") (certainty ?cF303))
(fact (name "Offline") (certainty ?cF602))
(not (exists (fact (name "Hollow Knight"))))
?tk <- (token (name "rule_134"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF612 ?cF612 ?cF303 ?cF602) 0.9))
(assert (fact (name "Hollow Knight") (certainty ?cnew)))
(assert (sendmessage "Difficult, Difficult, Platformer, Offline -> Hollow Knight"))
(assert (sendmessage (str-cat "Hollow Knight " ?cnew))))
(defrule rule134_2
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Difficult") (certainty ?cF612))
(fact (name "Platformer") (certainty ?cF303))
(fact (name "Offline") (certainty ?cF602))
?f <- (fact (name "Hollow Knight") (certainty ?cf_))
?tk <- (token (name "rule_134"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF612 ?cF612 ?cF303 ?cF602) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Difficult, Difficult, Platformer, Offline -> Hollow Knight"))
(assert (sendmessage (str-cat "Hollow Knight " ?cnew))))
(deffacts rule-token-136 (token (name "rule_136")))
(defrule rule136_1
(fact (name "3D") (certainty ?cF205))
(fact (name "Third Person View") (certainty ?cF202))
(fact (name "Difficult") (certainty ?cF612))
(not (exists (fact (name "Dark Souls"))))
?tk <- (token (name "rule_136"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF205 ?cF202 ?cF612) 0.9))
(assert (fact (name "Dark Souls") (certainty ?cnew)))
(assert (sendmessage "3D, Third Person View, Difficult -> Dark Souls"))
(assert (sendmessage (str-cat "Dark Souls " ?cnew))))
(defrule rule136_2
(fact (name "3D") (certainty ?cF205))
(fact (name "Third Person View") (certainty ?cF202))
(fact (name "Difficult") (certainty ?cF612))
?f <- (fact (name "Dark Souls") (certainty ?cf_))
?tk <- (token (name "rule_136"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF205 ?cF202 ?cF612) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "3D, Third Person View, Difficult -> Dark Souls"))
(assert (sendmessage (str-cat "Dark Souls " ?cnew))))
(deffacts rule-token-138 (token (name "rule_138")))
(defrule rule138_1
(fact (name "Online") (certainty ?cF601))
(fact (name "Detective Game") (certainty ?cF317))
(fact (name "Top-down View") (certainty ?cF208))
(not (exists (fact (name "Among Us"))))
?tk <- (token (name "rule_138"))
=>
(retract ?tk)
(bind ?cnew (* (min ?cF601 ?cF317 ?cF208) 0.9))
(assert (fact (name "Among Us") (certainty ?cnew)))
(assert (sendmessage "Online, Detective Game, Top-down View -> Among Us"))
(assert (sendmessage (str-cat "Among Us " ?cnew))))
(defrule rule138_2
(fact (name "Online") (certainty ?cF601))
(fact (name "Detective Game") (certainty ?cF317))
(fact (name "Top-down View") (certainty ?cF208))
?f <- (fact (name "Among Us") (certainty ?cf_))
?tk <- (token (name "rule_138"))
=>
(retract ?tk)
(bind ?cnew (combine (* (min ?cF601 ?cF317 ?cF208) 0.9) ?cf_))
(modify ?f (certainty ?cnew))
(assert (sendmessage "Online, Detective Game, Top-down View -> Among Us"))
(assert (sendmessage (str-cat "Among Us " ?cnew))))
;(deffacts characters
;	(fact (name "Batman"))
;	(fact (name "Jonkler"))
;)

;(defrule rule1
;	(fact (name "Batman"))
;	(fact (name "Jonkler"))
;	=>
;	(assert (fact (name "Battle")))
;	(assert (sendmessage "Battle has started"))
;)
;
;(defrule rule2
;	(fact (name "Battle"))
;	(fact (name "Jonkler dead"))
;	=>
;	(assert (fact (name "Batman won!")))
;	(assert (sendmessagehalt "Battle has ended!"))
;)
;
